<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
    <title type="text" xml:lang="en">Şefik Furkan Bayram - Yazılım ve Tasarım</title>
    <link type="application/atom+xml" rel="self" href="http://localhost:3000/atom.xml"/>
  
  <link href="http://localhost:3000/"/>
  <id>http://localhost:3000/</id>
  <updated>2018-03-25T19:15:46Z</updated>
  <author>
    <name>Şefik Furkan Bayram</name>
    <email>sefikfurkanbayram@gmail.com</email>
  </author>
  <rights type="text">Copyright © 2018 Şefik Furkan Bayram. All rights reserved.</rights>
  
  <entry>
  <title type="text">SCSS ile Çalışma Ortamını Hazırlamak ve İlk Giriş</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/scss-ile-calisma-ortamini-hazirlamak-ve-ilk-giris.html" />
  <id>http://localhost:3000/scss-ile-calisma-ortamini-hazirlamak-ve-ilk-giris</id>
  <published>2018-01-16T23:15:43Z</published>
  <updated>2018-01-16T23:15:43Z</updated>
  <content type="html"><![CDATA[ <p>Merhaba arkadaşlar bir önceki yazımda <strong>“SASS ve SCSS Nedir? Neden Kullanmalıyız ve Nasıl Kurulur?”</strong> konularına değinmiştim. Bu sefer ise <strong>SCSS</strong> ile nasıl çalışmaya başlayacağımızdan ve benim genelde kullandığım klasör yapısından bahsedeceğim. 
Bilgisayarında <strong>SCSS</strong> kurulu olmayanlar <a href="http://furkanbayram.net/sass-ve-scss-nedir-neden-kullanmaliyiz-nasil-kurulur.html" target="?blank">buradan</a> yardım alabilirler.</p>

<p>Genelde giriş seviyesindeki projelerde klasör yapımı aşağıdaki gibi oluşturuyorum.</p>

<p><img src="/static/images/post_image/scss-ile-calisma-ortamini-hazirlamak-ve-ilk-giris.html/1.png" class="img-responsive img-thumbnail" alt="" /></p>

<p>Dikkat ettiyseniz <strong>css</strong> ve <strong>scss</strong> diye iki farklı klasörümüz var. Önceden hep css içinde çalışıyorduk ama artık scss klasörü içinde çalışacağız.</p>

<p>scss klasörünün içine giriyoruz ve “style.scss” ismiyle scss dosyamızı oluşturuyoruz. (istediğiniz ismi verebilirsiniz ben genelde “style” ismini kullanıyorum.)</p>

<p>Oluşturduğumuz “style.scss” dosyasının içerisine aşağıdaki kodları kopyalıyoruz ve <strong>kaydediyoruz</strong>.</p>

<figure class="highlight"><pre><code class="language-scss" data-lang="scss"><span class="nv">$font-stack</span><span class="p">:</span>    <span class="n">Helvetica</span><span class="o">,</span> <span class="nb">sans-serif</span><span class="p">;</span>
<span class="nv">$primary-color</span><span class="p">:</span> <span class="mh">#333</span><span class="p">;</span>

<span class="nt">body</span> <span class="p">{</span>
  <span class="nl">font</span><span class="p">:</span> <span class="m">100%</span> <span class="nv">$font-stack</span><span class="p">;</span>
  <span class="na">backgorund-color</span><span class="p">:</span> <span class="nv">$primary-color</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Şimdi biz bu kodları buraya yazdık ve kaydettik ama sayfamızda bir değişiklik olmadı. Çünkü bu kodların css formatına çevrilmesi gerekiyor. Yani burada yazdığımız kodların yazıldıktan hemen sonra css klasörünün içine aktarılması gerekiyor. Bunu nasıl yapacağız diye sakın korkmayın, çok basit.</p>

<p>Projemizin kök dizininde komut satırını açıyoruz. 
<img src="/static/images/post_image/scss-ile-calisma-ortamini-hazirlamak-ve-ilk-giris.html/2.png" class="img-responsive img-thumbnail" alt="" /></p>

<p>Komut satırına aşağıdaki kodu yazıyoruz.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">sass <span class="nt">--watch</span> scss:css </code></pre></figure>

<p>Bu tek satırlık kod css klasörünün içinde bizim için bir css dosyası oluşturuyor. Bu işlem sayesinde scss tarafında yazdığımız her kod anında css’e otomatik olarak dönüştürülüyor.</p>

<p>Eğer başarılı bir şekilde tüm adımları gerçekleştirdiyseniz komut satırında şöyle bir çıktı almanız gerekiyor.
<img src="/static/images/post_image/scss-ile-calisma-ortamini-hazirlamak-ve-ilk-giris.html/4.png" class="img-responsive img-thumbnail" alt="" /></p>

<p>Aşağıda scss ve css dosyalarımızın çıktısını görüyorsunuz.
<img src="/static/images/post_image/scss-ile-calisma-ortamini-hazirlamak-ve-ilk-giris.html/3.png" class="img-responsive img-thumbnail" alt="" />
Biz kodlarımızı sadece scss kısmına yazıyoruz ve “–watch” komutu sayesinde yaptığımız her değişiklik izlenip css kısmına aktarılıyor.</p>

<h1>Özet</h1>

<ol>
  <li>SCSS’i bilgisayarımıza kuruyoruz. Kurulu değil ise <a href="http://furkanbayram.net/sass-ve-scss-nedir-neden-kullanmaliyiz-nasil-kurulur.html" target="?blank">buradan</a> kurabilirsiniz.</li>
  <li>İsteğe bağlı olarak klasör yapısını oluşturuyoruz.</li>
  <li>“scss” klasörünün içine istediğiniz isimde bir scss dosyası oluşturuyoruz. Örneğin: style.scss</li>
  <li>Projemizin ana dizininde komut satırını çalıştırıyoruz.</li>
  <li>Komut satırına <code> sass --watch scss:css</code> yazıyoruz ve enter’a basıp çalıştırıyoruz.</li>
  <li><strong>Html sayfamızda css dosyamızı çağırmayı unutmuyoruz.</strong></li>
</ol>
<h4>Ve artık SCSS ile çalışmaya başlayabiliriz.</h4>

<p>Eğer takıldığınız bir yer olursa aşağıya yorum olarak yazabilirsiniz. Bir sonraki yazıda scss’in syntax yapısına değineceğim. Kendinize iyi bakın, bol kahveler :)</p>

 ]]></content>
</entry>


  <entry>
  <title type="text">SASS ve SCSS Nedir ? Neden Kullanmalıyız ? Nasıl Kurulur ?</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/sass-ve-scss-nedir-neden-kullanmaliyiz-nasil-kurulur.html" />
  <id>http://localhost:3000/sass-ve-scss-nedir-neden-kullanmaliyiz-nasil-kurulur</id>
  <published>2018-01-12T16:29:00Z</published>
  <updated>2018-01-12T16:29:00Z</updated>
  <content type="html"><![CDATA[ <p>Herkese merhaba,
Neredeyse her yazıma uzun zamandır yazamıyorum diye başlamak zorunda kalıyorum :) Ama bundan sonra düzenli olarak bildiklerimi sizlerle paylaşmaya çalışacağım. Bugün CSS-preprocessor’lerden SASS ve SCSS hakkında bilgi vereceğim.</p>

<h1>CSS Preprocessor Nedir ?</h1>

<p>Preprocessor’ün Türkçe karşılığı <strong>Ön-derleyeci</strong>‘dir. Önderleyiciler bize programlama dillerinde olduğu gibi CSS yazarken de fonksiyon oluşturma, değişken tanımlama, operatörleri kullanma gibi olanaklar sağlıyor.</p>

<p>Şuanda popüler olan 3 adet önderleyici vardır. Bunlar <strong>SASS, LESS, </strong>ve <strong>Stylus</strong>‘dur. Bu yazımda <strong>SASS </strong> ve <strong>SCSS</strong>‘den bahsedeceğim.</p>

<h1>SASS Nedir ?</h1>
<p><strong>SASS</strong>, 2006 yılında geliştirilmeye başlanan, Ruby diline yakın bir dille CSS yazmayı hedefleyen bir Ruby Gem’dir. 2008 yılına kadar <a href="https://www.google.com.tr/search?q=Hampton+Catlin&amp;oq=Hampton+Catlin&amp;aqs=chrome..69i57.150j0j7&amp;sourceid=chrome&amp;ie=UTF-8" target="_blank">Hampton Catlin</a> tarafından geliştirilmiştir. Şu anda ise açık kaynak bir teknoloji olarak geliştirilmeye devam etmektedir.</p>

<p>Sürekli gelişen yazılım dünyasında CSS’in eski bir teknoloji olarak kalmasını beklemeyezdik. <strong>SASS</strong> sayesinde dinamik bir şekilde CSS yazmaya başladık ve sayfalarımıza javascript dahil etmeden ileri seviye animasyonlar yapmak SASS sayesinde daha kolay ve basit bir hale geldi.</p>

<p><strong>SASS</strong>, Ruby benzeri bir syntax ile yazılır ve yazılan bu kodlar CSS’e dönüştürülür. Bu dönüştürme işlemi otomatik olarak yapılır ve projeye dahil edilir. Ekstra bir derleme komutu gerekmeden projenizdeki her “<em>.sass” ve “</em>.scss” uzantılı dosyayı derleyerek projenize dahil eder.</p>

<p>SASS bir uzantı dilidir. CSS ile yaptığımız işleri daha kolay, daha hızlı ve daha okunabilir bir şekilde yazmamızı sağlayan bir teknolojidir.</p>

<h1>SCSS Nedir ?</h1>
<p><strong>SCSS, SASS’ın syntax olarak CSS’e daha çok benzeyen halidir.</strong></p>

<p>SASS yazarken parantez işaretleri ve noktalı virgül kullanılmadığı için CSS yazmaya alışan geliştiriciler <strong>SASS</strong> yazarken zorlanıyordu. Bu sebeple <strong>SCSS</strong> ile parantezler ve noktalı virgül kullanımı geri geldi. Syntax biraz daha CSS’e benzedi.</p>

<h2>Neden SCSS Kullanmalıyız ?</h2>
<p>Neden <strong>SCSS</strong> kullanmanız gerektiğini diğer yazılarda göstereceğim örneklerle daha rahat anlayacaksınız ama şimdilik size <strong>SCSS</strong>‘in bir kaç müthiş özelliğinden bahsedeyim.</p>

<ol>
  <li>Bence <strong>SCSS</strong> kullanmamızın en önemli sebebi CSS’i statik yapıdan çıkartıp dinamik bir programlama dili gibi kullanabilmemizi sağlamasıdır.</li>
  <li>Hızlı bir şekilde stil dosyalarını oluşturmamıza olanak sağlar.</li>
  <li>Projeler büyüdükçe CSS dosyalarımız daha karmaşık bir hal alıyor. Belirli bir süreden sonra kodlar tekrarlamaya başlıyor ve bu da gereksiz yere kod yazmamıza neden oluyor. <strong>SCSS</strong> bizi bu karmaşıklıktan kurtarıp kod tekrarı yapmamızı önlüyor.</li>
  <li>Örneğin: sayfamızda bir renk kodunu sürekli kullanmamız gerekiyor. Bu renk kodunu SCSS ile bir değişkene atıyoruz ve o değişkeni istediğimiz yerde kullanabiliyoruz. Böylece stil dosyamız büyüse bile istediğimiz değişikliği o değişkenin değerini değiştirerek tüm sayfada yapabiliyoruz.</li>
</ol>

<h2>SASS ve SCSS Nasıl Kurulur ?</h2>
<p>SASS ve SCSS kurulumunu ayrı ayrı yapmıyoruz. Yukarıda belirttiğim gibi ikiside aynı çatı altında çalışıyor, sadece syntax farkı var. Aşağıdaki kurulum ikisi içinde geçerlidir.</p>

<p>Bilgisayarınıza kurabilmek için iki seçeneğimiz var. Birincisi yardımcı  masaüstü programlar ile, ikinci yol ise komut satırından kurulum. Ben size komut satırından kurulumu anlatacağım.</p>

<ol>
  <li>
    <p><strong>SASS</strong> ve <strong>SCSS</strong> ile çalışabilmek için bilgisayarımızda Ruby’nin kurulu olması gerekiyor.
<a href="https://rubyinstaller.org/downloads/">Buradan</a>, işletim sisteminize uygun olan sürümü seçerek indirip, kurulumu gerçekleştirebilirsiniz.</p>
  </li>
  <li>
    <p>Ruby’i bilgisayarımıza kurduktan sonra masaüstüne gelip, <strong>Windows + R</strong> tuşlarına basıyoruz ve açılan ekrandaki alana <strong>cmd</strong> yazıp komut satırını başlatıyoruz.</p>
  </li>
  <li>
    <p>Komut satırına aşağıdaki komutu yazarak sass kurulumunu gerçekleştiriyoruz.</p>
  </li>
</ol>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">gem install sass 	// sass kurulumunu gerçekleştiriyoruz.</code></pre></figure>

<p>Kurulum tamamlandıktan sonra aşağıdaki gibi bir mesaj alacaksınız.</p>

<p><img class="img-responsive" src="../static/images/post_image/sass-ve-scss-nedir-neden-kullanmaliyiz-nasil-kurulur.html/1.png" /></p>

<p>Kurulumun gerçekleştiğini kontrol etmek için aşağıdaki komutu yazın ve sonuç olarak bilgisayarınızda kurulu olan sass versiyonunu size döndürüyorsa eksiksiz bir şekilde kurulum tamamlanmış demektir.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">sass <span class="nt">-v</span> 	// sass versiyonunu ekrana yazdırıyoruz.</code></pre></figure>

<h1>Sonuç</h1>
<p>Temiz ve okunaklı bir kod yapısının önemini anlatmaya gerek yok. Projeler büyüdükçe CSS dosyları içinden çıkılamayacak bir hal alıyor ve salt CSS ile bu stil dosyalarını temiz ve okunaklı bir şekilde yazmak oldukça güçleşiyor. İşte tam burada devreye <strong>CSS preporecessor</strong>‘ler giriyor. SCSS kullanmamın sebebi ise syntax’ının oldukça CSS’e benzemesi ve bir çok kaynağın bulunması.</p>

<p><strong>SCSS</strong> yazarken dikkatli bir şekilde yazmazsınız bir süre sonra normal CSS’den farkı kalmayacaktır. Buda <strong>CSS preporecessor</strong> kullanmanın bir anlamı kalmaması demektir. O yüzden dikkatli ve temiz bir şekilde kodlama yapmanız gerekiyor.</p>

<p>Birdahaki yazımda SASS ve SCSS ayarları nasıl yapılır ondan bahsedeceğim. Yararlı olabildiysem ne mutlu bana.
İyi çalışmalar, iyi günler…</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Sublime Text 3 Kurulum, Kullanım ve Eklentiler</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/sublime-text-3-kurulum-kullanim-ve-eklentiler.html" />
  <id>http://localhost:3000/sublime-text-3-kurulum-kullanim-ve-eklentiler</id>
  <published>2017-09-03T02:26:00Z</published>
  <updated>2017-09-03T02:26:00Z</updated>
  <content type="html"><![CDATA[ <p>Herkese merhaba. Uzun zamandır geliştirme yaparken <strong>Brackets</strong> metin editörünü kullanıyordum. Son 1 haftadır bu editörün performansından rahatsızlık duymaya başladım. Bu yüzden yeni bir metin editörü arayışına girdim. En az 3-4 adet editör değiştirdim ve sonunda <strong>Sublime Text 3</strong> kullanmaya karar verdim. Bu yazımda <strong>Linux</strong> işletim sistemine <strong>Sublime Text 3</strong> nasıl kurulur, eklentiler nasıl yüklenir, editör nasıl özelleştiriler vb. konulardan bahsedeceğim.</p>

<h1>Sublime Text 3 Kurulumu</h1>

<p>Terminalimizi açıp aşağıdaki komutları çalıştırıyoruz.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">wget http://c758482.r82.cf2.rackcdn.com/sublime-text_build-3083_amd64.deb 

<span class="nb">sudo </span>dpkg <span class="nt">-i</span> sublime-text_build-3083_amd64.deb</code></pre></figure>

<p>Yukarıdaki komutlar ile <strong>Sublime Text 3</strong>‘ü bilgisayarımıza indiriyoruz. Daha sonra ise kurulum işlemini gerçekleştiriyoruz.</p>

<p>YÜkleme işlemi tamamlandıktan sonra komut satırına <strong>subl</strong> yazıp editörümüzü çalıştırıyoruz.</p>

<h1>Sublime Settings</h1>

<p><strong>Sublime Text</strong> tamamen açık kaynak kodlu bir editördür. Yani istediğiniz değişikliği istediğiniz şekilde yapabilirsiniz. Tüm ayarlar <strong>Preferences.sublime-settings</strong> altında bulunur. Burayı açmak için yukarıdaki menüden <strong>Preferences / Settings</strong> diyoruz. Örnek olarak aşağıda kendi <strong>Preferences.sublime-settings</strong> dosyamı paylaşıyorum.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"> <span class="o">{</span>
	<span class="s2">"bold_folder_labels"</span>: <span class="nb">true</span>,
	<span class="s2">"color_scheme"</span>: <span class="s2">"Packages/Base16 Color Schemes/Themes/base16-isotope.tmTheme"</span>,
	<span class="s2">"font_face"</span>: <span class="s2">"Menlo"</span>,
	<span class="s2">"font_size"</span>: 10,
	<span class="s2">"highlight_line"</span>: <span class="nb">true</span>,
	<span class="s2">"ignored_packages"</span>:
	<span class="o">[</span>
		<span class="s2">"Vintage"</span>
	<span class="o">]</span>,
	<span class="s2">"line_padding_bottom"</span>: 1,
	<span class="s2">"line_padding_top"</span>: 1,
	<span class="s2">"theme"</span>: <span class="s2">"Boxy Tomorrow.sublime-theme"</span>,
	<span class="s2">"theme_sidebar_disclosure"</span>: <span class="nb">true</span>,
	<span class="s2">"theme_sidebar_font_md"</span>: <span class="nb">true</span>,
	<span class="s2">"theme_sidebar_size_xxs"</span>: <span class="nb">true</span>,
	<span class="s2">"theme_unified"</span>: <span class="nb">true</span>
<span class="o">}</span></code></pre></figure>

<h1>Paket Yöneticisinin Kurulumu</h1>

<p>Eklenti kurulumuna geçmeden önce <strong>paket yöneticisinin</strong> kurulumunu gerçekleştirmemiz gerekiyor.
Bunun için <a href="https://packagecontrol.io/installation">buraya</a> tıkladıktan sonra açılan sayfadaki <strong>Sublime Text 3</strong> sekmesi altındaki kodları kopyalıyoruz.<br />
Daha sonra editörümüzü açıp menülerden <strong>View / Show Console</strong> diyoruz. Kopyaladığımız kodları açılan konsol ekranına kopyalıyoruz ve <strong><kbd>ENTER</kbd></strong> tuşuna basıp <strong>paket yöneticisinin</strong> kurulumunu tamamlıyoruz.</p>

<h1>Eklentilerin Kurulumu</h1>
<p>Eklentilerin kurulumu için editörümüzdeki menüden <strong>Tools / Command Palette</strong> dedikten sonra açılan bölüme <strong>install package</strong> yazıp, <strong>Package Control: Install Package</strong> bölümüne giriyoruz.<br />
İşte bu açılan kısım eklentilerin listelendiği bölüm. Buradan işimize yarayan, istediğimiz eklentiyi artık yükleyebiliriz.<br />
Aşağıda, kod yazarken kullandığım, işinizi kolaylaştıracak bazı eklentileri paylaşacağım.</p>

<h2>1. AutoFileName</h2>

<p><img class="img-responsive" src="../static/images/post_image/sublime-text-3-kurulum-kullanim-ve-eklentiler.html/1.png" alt="Görüntü yüklenemedi lütfen sayfayı tekrar yükleyiniz." />
Bu eklenti dosya adlarını otomatik olarak tamamlıyor ve dosya isimlerini yazarken yazım hatası yapmamızı en aza indiriyor. Örneğin <strong>href</strong> etiketlerinde, html içindeki <strong>img</strong> etiketlerinde yol belirtirken veya stil dosyalarında <strong>background-image</strong> için yol belirtirken aynı seviyedeki veya alt seviyelerdeki dosya ve klasörleri görmemizi sağlıyor. Ayrıyetten resimlere ait <strong>yükseklik X genişlik</strong> değerlerinide görebiliyoruz.</p>

<h2>2. Autoprefixer</h2>

<p><img class="img-responsive" src="../static/images/post_image/sublime-text-3-kurulum-kullanim-ve-eklentiler.html/4.gif" alt="Görüntü yüklenemedi lütfen sayfayı tekrar yükleyiniz." />
CSS yazarken işlerimizi kolaylaştıracak bir eklenti bu. Örneğin, <strong>transform</strong> özelliğinin chrome veya safari gibi tarayıcılarda çalışması için <strong>-webkit-transform</strong>, IE için ise <strong>-ms-transform</strong> yazmamız gerekiyor. Bu eklenti sayesinde bunları ayrı ayrı yazmıyoruz.</p>

<h2>3. BracketHighlighter</h2>

<p><img class="img-responsive" src="../static/images/post_image/sublime-text-3-kurulum-kullanim-ve-eklentiler.html/2.png" alt="Görüntü yüklenemedi lütfen sayfayı tekrar yükleyiniz." />
Artık parantezi açtım mı, tırnağı kapattım mı derken şaşı olmaya son :) Bu eklenti sayesinde parantezlerin veya tırnak içindeki alanların başlangıç veya bitişlerini çok rahat bulabileceksiniz. Adındanda anlaşılacağı gibi başlangıç ve bitiş kısımlarını belirgin hale getiriyor.</p>

<h2>4. Boxy Theme</h2>

<p>Boxy Theme içinde onlarca tema bulunduruyor. Eğer bu temalar hoşunuza gitmese bile editörünüzü istediğiniz şekilde değiştirebilirsiniz. Menülerin renklerini, yazı fontlarını, yazı renklerini, menü stillerini vb. bir çok özelliği çok basit bir şekilde bu eklenti ile değiştirebilirsiniz.</p>

<h2>5. CSS Extended Completions</h2>

<p><img class="img-responsive" src="../static/images/post_image/sublime-text-3-kurulum-kullanim-ve-eklentiler.html/3.png" alt="Görüntü yüklenemedi lütfen sayfayı tekrar yükleyiniz." />
Bir tek <strong>CSS Extended Completions</strong> olsun bana bir şey olmaz :) diyebileceğim bir eklenti. Stil dosyalarınızdaki fonksiyon, class ve id isimlerini html içerisinde kullanırken, daha siz yazmadan otomatik olarak tamamlıyor. Yeni bir CSS freamworküne başlayacağınız zaman bu eklenti bulunmaz bir veli nimet. Yabancısı olduğunuz freamworke, bu eklenti sayesinde kolayca alışabilirsiniz.</p>

<h2>6. Emmet</h2>

<p><strong>Emmet</strong> eklentisini isterseniz uygulamalı olarak açıklayayım.<br />
<strong>div.ul&gt;li*5</strong> yazıp editörümüzde <strong><kbd>TAB</kbd></strong> tuşuna basarsak çıktı şu şekilde olacaktır.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"> <span class="nt">&lt;div&gt;</span>
 	<span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"li"</span><span class="nt">&gt;&lt;/ul&gt;</span>
 	<span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"li"</span><span class="nt">&gt;&lt;/ul&gt;</span>
 	<span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"li"</span><span class="nt">&gt;&lt;/ul&gt;</span>
 	<span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"li"</span><span class="nt">&gt;&lt;/ul&gt;</span>
 	<span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"li"</span><span class="nt">&gt;&lt;/ul&gt;</span>
 <span class="nt">&lt;/div&gt;</span></code></pre></figure>

<p><strong>Emmet</strong> için ileriki zamanlarda ayrı bir yazı yazacağım. Çünkü tam anlamıyla kullanımı öğrenildiğinde, zamandan baya bir tasarruf etmemizi sağlıyor. İncelemek isterseniz <a href="https://docs.emmet.io/">buradan</a> dökümantasyonuna, <a href="https://docs.emmet.io/cheat-sheet/">şuradan</a> da kısayollara ulaşabilirsiniz.</p>

<h2>5. HTML/CSS/JS Prettify</h2>
<p>Tek kombinasyon ile html, css ve javascript dosyalarımızı okunabilir, girinti yapısına uygun bir şekilde düzenliyor. Default tuş kombinasyonu <strong><kbd>CTRL + SHİFT + H</kbd></strong><br />
<strong>NOT: Çalışması için sisteminizde nodejs kurulu olmalıdır.</strong></p>

<p>Evet arkadaşlar yazımızın sonuna geldik. Diğer yazılarda görüşmek üzere, hoşçakalın.</p>

 ]]></content>
</entry>


  <entry>
  <title type="text">Jekyll Tema Değiştirme ve Klasör Yapısı</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/jekyll-tema-degistirme-ve-klasor-yapisi.html" />
  <id>http://localhost:3000/jekyll-tema-degistirme-ve-klasor-yapisi</id>
  <published>2017-08-31T01:28:00Z</published>
  <updated>2017-08-31T01:28:00Z</updated>
  <content type="html"><![CDATA[ <p>Heerkese merhaba. Önceki yazımda jekyll ile nasıl proje oluştururuz bundan bahsetmiştim. Bu yazımda ise jekyll dosya yapısından, oluşturduğumuz projeyi nasıl özelleştirebileceğimizden ve bazı özelliklerden bahsedeceğim.</p>

<h1>Jekyll Klasör Yapısı</h1>

<p><img class="img-responsive" src="static/images/post_image/jekyll-tema-degistirme-ve-klasor-yapisi.html/1.png" alt="Görüntü yüklenemedi lütfen sayfayı tekrar yükleyiniz." />
Oluşturulan bir jekyll projesi genel hatları ile başlangıçta yukarıdaki gibi bir klasör yapısına sahiptir.
Projemizi oluşturduğumuzda hazır olarak <strong>minima</strong> isimli tema ile gelir ve daha sonra istersek sıfırdan bir tema oluşturabiliriz veya hazır olarak bulunan temaları değiştirerek istediğimiz hale getirebiliriz. Klasör yapısından bahsettikten sonra tema konusuna daha detaylı bir şekilde değineceğim. 
Dilerseniz bu klasörler ne işe yarar biraz onlardan bahsedelim.</p>

<h2>_post</h2>
<p>Bu klasörün altında genelde blog sitesi oluşturulduğunda yayınlanacak yazılar bulunur. Bir post yayınlamak için <kbd>yil-ay-gun-post-ismi.md</kbd> şeklinde bir dosya oluşturmamız gerekir.  <strong>Örneğin:</strong> <kbd>2017-08-31-jekyll-dosya-yapisi-ve-bazi-ipuclari.md</kbd> şeklinde kaydedebiliriz. Projemizi oluşturduğumuz zaman aşağıdaki gibi hazır bir post ile gelir. İsterseniz bu örneği inceleyelim.</p>

<p><img class="img-responsive" src="/static/images/post_image/jekyll-tema-degistirme-ve-klasor-yapisi.html/2.png" alt="Görüntü yüklenemedi lütfen sayfayı tekrar yükleyiniz." /></p>
<ul>
  <li>layout: Bu dosyanın bir post olduğunu belirtiyoruz.</li>
  <li>title: Postumuzun başlığı. Örneğin bu postun başlığı “Jekyll Klasör Yapısı ve Tema Değiştirme”dır.</li>
  <li>date: Postunuzun yayınlama tarihi ve saati.</li>
  <li>categories: Postunuzun bulunacağı kategori.</li>
  <li>Diğer kalan kısım ise yazımızın içeriğidir. Farkettiyseniz bu dosyayı <strong>.markdown</strong> uzantısı ile kaydetmiştik. Bunun sebebi yazarken <strong>markdown syntax</strong> kullanmamızdır. Eğer markdown syntax hakkında bilginiz yoksa <a href="https://learn.getgrav.org/content/markdown">buradan</a> bilgi edinebilirsiniz.</li>
</ul>

<h2>_site</h2>
<p>Bu kısım proje çalıştırıldıktan sonra oluşur. Burada sitemizin tüm içeriği bulunur. Statik dosyalar burada tutulur. Örneğin, resimler, css ve js dosyaları.</p>

<h2>404.html</h2>
<p>Kullanıcılar hatalı bir linke yönlendirildiğinde veya adres çubuğuna hatalı bir link girdiklerinde gösterilecek sayfadır. Klasik 404 sayfası oluşturduğumuz gibi html kodları ile bu sayfayı oluşturabiliriz.</p>

<h2>Gemfile</h2>
<p>Burası ruby ile alakalı olan kısımdır. Plugin yüklemek istersek burayı kullanacağız.</p>

<h2>Gemfile.lock</h2>
<p>Bilgisayarımızda yüklü olan pluginlerin listesini verir. Ayrıca projemizde kullandığımız pluginleride buradan görebiliriz.</p>

<h2>_config.yml</h2>
<p>Çok önemli bir kısımdır. Sitemizin alanadı, zaman dilimi, klasör yapısı, plugin ayarları, tema ayarları, sitemizin başlığı, açıklamalar, site sahibi gibi ayarlar buradan yapılır. Buradaki içeriğin çoğunu komut satırından ayarlayabiliriz fakat buradan oluştursak unutma gibi bir problemle karşılaşmaz daha kolay değişiklikler yapabiliriz.</p>

<h2>about.md ve index.md</h2>
<p>Temanın oluşturduğu dosyalardır. Sitemizde açılış sayfasında <v></v>e hakkımda linkine tıklandığında gösterilecek içerik buradan belirlenir. İlerleyen zamanlarda buraya eklemeler yapabiliriz. Örneğin: Projeler, Kategoriler, Arşiv, Blog.</p>

<h1>Hazır Tema Kullanımı</h1>
<p>Jekyll ile önceden diğer kullanıcılar tarafından oluşturulmuş bir çok hazır tema vardır. Bu temaları<a href="www.jekyllthemes.com"> buradan</a> görebilirsiniz. Ben örnek olarak <a href="https://mmistakes.github.io/jekyll-theme-basically-basic/">jekyll-theme-basically-basic</a> temasını kullanacağım.</p>

<p>Temayı yüklemek için projemizin bulunduğu klasöre giriyoruz.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">nano Gemfile //Gemfile dosyasını nano ile terminal ekranında başlatıyoruz.</code></pre></figure>

<p>Gemfile dosyası açıldıktan sonra <strong>gem “minima”, “~&gt; 2.0”</strong> yazısının hemen alt satırına <strong>gem “jekyll-theme-basically-basic”</strong> yazıyoruz. Altına yazmamızın sebebi düzenli gözükmesi için. İsterseniz bu dosya içinde farklı bir yerede yazabilirsiniz. <strong>CTRL + X</strong> tuşlarına basıp çıkan uyarıya <strong>Evet</strong> deyip kaydedip çıkıyoruz.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">nano _config.yml //_config.yml dosyasını nano ile terminal ekranında başlatıyoruz.</code></pre></figure>

<p>Sayfanın altlarına inip <strong>themes: minima</strong> yazan kısmı buluyoruz ve <strong>minima</strong> kısmını <strong>jekyll-theme-basically-basic</strong> şeklinde değiştiriyoruz. Yine aynı şekilde <strong>CTRL + X</strong> tuşlarına basıp <strong>Evet</strong> deyip kaydedip çıkıyoruz.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">bundle install // temamızı yüklüyoruz.
jekyll serve   // projemizi çalıştırıyoruz.</code></pre></figure>

<p><img class="img-responsive" src="../static/images/post_image/jekyll_tema_degistirme_ve_klasor_yapisi/3.png" alt="Görüntü yüklenemedi lütfen sayfayı tekrar yükleyiniz." /></p>

<h2><strong>Tebrikler.</strong></h2>
<p>Yukarıda gördüğünüz gibi temamız değişti. Bundan sonra içerik üretmek veya temayı özelleştirmek sizin zevkinize kalmış. Eğer isterseniz kendinizde sıfırdan bir tema oluşturabilirsiniz.</p>

<p>Yazımı sonuna kadar okuduğunuz için teşekkür ederim. Umarım faydalı bir yazı olmuştur. Görüşmek üzere.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Jekyll ve Github Pages ile Ücretsiz Blog Oluşturmak</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/jekyll-ve-github-pages-ile-ucretsiz-blog-olusturmak.html" />
  <id>http://localhost:3000/jekyll-ve-github-pages-ile-ucretsiz-blog-olusturmak</id>
  <published>2017-08-30T02:40:00Z</published>
  <updated>2017-08-30T02:40:00Z</updated>
  <content type="html"><![CDATA[ <p>Herkese merhaba. Öncelikle <a href="https://jekyllrb.com/">Jekyll</a> nedir ne işe yarar bize neler sağlar onlardan bahsetmek istiyorum. 
<a href="https://jekyllrb.com/">Jekyll</a>, Github’ın ruby ile geliştirmiş olduğu statik web sayfalar oluşturmamızı sağlayan bir araçtır. <a href="https://jekyllrb.com/">Jekyll</a>‘nin resmi web sitesine girdiğimizde bizi “Transform your plain text into static websites and blogs.” diye bir yazı karşılıyor. Yani düz metinlerimizi web sitelerine ve bloglara dönüştürebileceğimizden bahsediyor. Tamamen ücretsiz olup hatrı sayılır bir kullanıcı kitlesi vardır. Lafı fazla uzatmadan <a href="https://jekyllrb.com/">Jekyll</a> nasıl kurulur, nasıl çalışır hale getirilir bunlardan bahsetmek istiyorum.</p>

<p><strong>NOT: Debian 9 kullandığım için anlatımımı Linux işletim sistemleri üzerinden gerçekleştireceğim.</strong></p>

<h1>Jekyll Kurulum</h1>

<p><a href="https://jekyllrb.com/">Jekyll</a> ile geliştirme yapabilmek için bilgisayarımızda ruby’nin kurulu olması gerekmektedir.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">su 	// ruby kurulumunu gerçekleştirebilmek için sistemde root olmamız gerekiyor</code></pre></figure>

<p>Bizden sistem parolamızı isteyecektir. Girdikten sonra enter’a basıp devam ediyoruz.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">apt-get install ruby-full 	// ruby kurulumunu gerçekleştiriyoruz.

<span class="nb">exit</span> 				// root modundan çıkıyoruz.</code></pre></figure>

<p>Ruby kurulumunu gerçekleştirdikten sonra <strong>exit</strong> komutuyla root modundan çıkıyoruz.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">gem install jekyll 		// jekyll kurulumunu gerçekleştiriyoruz.</code></pre></figure>

<p>NOT: Buraları hızlıca geçmemin sebebi internette çok fazla kaynak ve dökümantasyon olması. Eğer hata alırsanız veya bir sorun ile karşılaşırsanız sosyal medya hesaplarımdan bana ulaşabilirsiniz. Elimden geldiğince yardımcı olmaya çalışırım.</p>

<h1>Jekyll İle İlk Sitemizi Oluşturalım</h1>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">jekyll new proje_adı 		// projemizi oluşturuyoruz.
	
<span class="nb">cd </span>proje_adı 			// projemizin bulunduğu klasöre giriyoruz.

jekyll serve 			// projemizi çalıştırıyoruz.</code></pre></figure>

<p><strong>new</strong> komutu ile ilk projemizi oluşturduk. Daha sonra projemizi oluşturduğumuz klasörün içine giriyoruz ve <strong>jekyll serve</strong> komutu ile projemizi çalıştırıyoruz.</p>

<p><img class="img-responsive" src="../static/images/post_image/jekyll-ve-github-pages-ile-ucretsiz-blog-olusturmak.html/1.png" /></p>

<p>Yukarıdaki gibi bir çıktı alırsak sitemiz başarılı bir şekilde oluşmuş ve çalışıyor.
Tarayıcımızı açıp adres çubuğuna, <strong>localhost:4000</strong> yazarsak sitemiz açılacaktır.</p>

<p><img class="img-responsive" src="../static/images/post_image/jekyll-ve-github-pages-ile-ucretsiz-blog-olusturmak.html/2.png" /></p>

<p>Ve sitemiz hazır. İlerleyen yazılarda projedeki klasörlerin ne işe yaradığını, hazır bir temayı nasıl kullanacağımızı, github üzerinden nasıl yayınlayacağımızı ve kendi alan adımızı nasıl kullanacağımızı anlatacağım.</p>

 ]]></content>
</entry>



</feed>